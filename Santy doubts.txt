

Concept doubts:

	1. Difference between real mode, protected mode in x86?
    Ans: Real mode - There is no protection of segments, in protected mode, there is protection using GDT.
    6. What is multibootheader?
    Ans: It is information in the OS kernel to the Bootloader about where/whats in the OS.
	7. Where is end loaded? Is it in kernel.ld? What is the address that it takes? Also, why is it linked and not hardcoded?
    Ans: It is loaded dynamically by the linked.
	8. Why is kernel page table loaded again in the main.c ? Because we do it once in entry.S ( l#52 - #61 ), which means that it should be set for the program running main as well.
    Ans: They are different page tables.
    9. Is the other processor not run until startothers in main.c L#35.
    Ans: They are common stuff that needs to be executed only once.
    Ans: The interrupt vector table, filetable, process table all are common, so only it is enough for one processor to do that.
    11. Why do you need mmap when you have mmap? You can just grow the heap whenever you need memory?
    12. Is MMAP intended to map files/devices to memory and also allocate memory for the processes to use?
    13. When do you use extern in your code? 
    Ans: Linked loads the values.
    14. What is the purpose of tss?
    Ans: Loads task specific values. 
    15. What are major and minor in devices?
    16. How are system calls called? Sys_wait -> wait?
    Ans: Usys.C


    Bootloader:

    1. Do we not specify the memory address for text mode?
    2. How many function families do you have and how many functions in each? Are these setup by the BIOS?



    Homework 3:

    1. The outb and inb indexes to the registers - how does the inb and outb access the registers in VGA?
    2. Should you remember the register instruction numbers?
    3. 2 bytes for foreground and background. But, in BIOS, they are 4 bits and 4 bits. 
    4. What happens in vgaMode13? How do we switch?

Code doubts:

2. bootmain.c L#67
3. entry.S L#75
7. proc.c L#94